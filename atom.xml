<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://horolee.github.io</id>
    <title>Horo</title>
    <updated>2022-08-28T13:43:02.935Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://horolee.github.io"/>
    <link rel="self" href="https://horolee.github.io/atom.xml"/>
    <subtitle>Horo的成长之路</subtitle>
    <logo>https://horolee.github.io/images/avatar.png</logo>
    <icon>https://horolee.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Horo</rights>
    <entry>
        <title type="html"><![CDATA[LeetCode每日一题(20220801)]]></title>
        <id>https://horolee.github.io/leetcode-mei-ri-yi-ti-20220801/</id>
        <link href="https://horolee.github.io/leetcode-mei-ri-yi-ti-20220801/">
        </link>
        <updated>2022-08-01T13:24:14.000Z</updated>
        <content type="html"><![CDATA[<h4 id="1374-生成每种字符都是奇数个的字符串"><a href="https://leetcode.cn/problems/generate-a-string-with-characters-that-have-odd-counts/">1374. 生成每种字符都是奇数个的字符串</a></h4>
<ul>
<li>题目： 给你一个整数 n，请你返回一个含 n 个字符的字符串，其中每种字符在该字符串中都恰好出现 奇数次 。</li>
</ul>
<p>返回的字符串必须只含小写英文字母。如果存在多个满足题目要求的字符串，则返回其中任意一个即可。</p>
<pre><code class="language-c#">示例1：
输入：n = 4
输出：&quot;pppz&quot;
解释：&quot;pppz&quot; 是一个满足题目要求的字符串，因为 'p' 出现 3 次，且 'z' 出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ohhh&quot; 和 &quot;love&quot;。

示例2：
输入：n = 2
输出：&quot;xy&quot;
解释：&quot;xy&quot; 是一个满足题目要求的字符串，因为 'x' 和 'y' 各出现 1 次。当然，还有很多其他字符串也满足题目要求，比如：&quot;ag&quot; 和 &quot;ur&quot;。
    
示例3：  
输入：n = 7
输出：&quot;holasss&quot;
</code></pre>
<ul>
<li>
<p>解题思路：</p>
<p>emmmm........</p>
</li>
<li>
<p>代码：</p>
</li>
</ul>
<pre><code class="language-c#">public class Solution {
   public string GenerateTheString(int n) {
       return (n % 2 == 0) ? new string('a', n -1) + 'b' : new string('a', n);
   }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode每日一题(20220707)]]></title>
        <id>https://horolee.github.io/leetcode-648/</id>
        <link href="https://horolee.github.io/leetcode-648/">
        </link>
        <updated>2022-07-07T06:37:24.000Z</updated>
        <content type="html"><![CDATA[<h4 id="648-单词替换"><a href="https://leetcode.cn/problems/replace-words/">648. 单词替换</a></h4>
<ul>
<li>
<p>题目： 在英语中，我们有一个叫做 词根(root) 的概念，可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。<br>
现在，给定一个由许多词根组成的词典 dictionary 和一个用空格分隔单词形成的句子 sentence。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。<br>
你需要输出替换之后的句子。</p>
<pre><code class="language-c#">示例1：
输入：dictionary = [&quot;cat&quot;,&quot;bat&quot;,&quot;rat&quot;], sentence = &quot;the cattle was rattled by the battery&quot;
输出：&quot;the cat was rat by the bat&quot;

示例2：
输入：dictionary = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;], sentence = &quot;aadsfasf absbs bbab cadsfafs&quot;
输出：&quot;a a b c&quot;
</code></pre>
</li>
<li>
<p>解题思路：</p>
<ol>
<li>暴力法：<br>
建立两层循环，外循环遍历sentence数组，内循环遍历dictionary数组，当sentence中的某个元素以dictionary中的某个元素开头时，则写入结果数组中，如果遍历到后期，dictionary数组中的某个短的词根也在sentence的开头，则用最短的替换，最后组合结果，用空格隔开即可。</li>
<li>字典树:<br>
利用dicrionary中的所有词根构造一棵字典树，并用特殊符号标记结尾。在搜索前缀时，只需在字典树上搜索出一条最短的前缀路径即可。</li>
</ol>
</li>
<li>
<p>代码：</p>
<pre><code class="language-c#">// 解法1：暴力法
public class Solution {
  public string ReplaceWords(IList&lt;string&gt; dictionary, string sentence) {
      string[] sentences = sentence.Split(' ');
      string[] results = new string[sentences.Length];

      for(int i = 0; i &lt; sentences.Length; i++){
          foreach(string s in dictionary){
              if(sentences[i].StartsWith(s)){
                  if(string.IsNullOrEmpty(results[i])){
                      results[i] = s;
                  }
                  else{
                      if(s.Length &lt; results[i].Length){
                          results[i] = s;
                      }
                  }
              }
          }

          if(string.IsNullOrEmpty(results[i])){
              results[i] = sentences[i];
          }
      }

      return string.Join(&quot; &quot;, results);
  }
}

// 解法2：字典树
public class Solution {
  public string ReplaceWords(IList&lt;string&gt; dictionary, string sentence) {
      Trie trie = new Trie();
      foreach(string word in dictionary){
          Trie cur = trie;
          for(int i = 0; i &lt; word.Length; i++){
              char c = word[i];
              if(!cur.Children.ContainsKey(c)){
                  cur.Children.Add(c, new Trie());
              }
              cur = cur.Children[c];
          }
          cur.Children.Add('#', new Trie());
      }

      string[] words = sentence.Split(' ');
      for(int i = 0; i &lt; words.Length; i++){
          words[i] = FindRoot(words[i], trie);
      }

      return string.Join(&quot; &quot;, words);
  }

  public string FindRoot(string word, Trie trie){
      StringBuilder root = new StringBuilder();
      Trie cur = trie;
      for(int i = 0; i &lt; word.Length; i++){
          char c = word[i];
          if(cur.Children.ContainsKey('#')){
              return root.ToString();
          }
          if(!cur.Children.ContainsKey(c)){
              return word;
          }
          root.Append(c);
          cur = cur.Children[c];
      }

      return root.ToString();
  }

  public class Trie{
      public Dictionary&lt;char, Trie&gt; Children;

      public Trie(){
          Children = new Dictionary&lt;char, Trie&gt;();
      }
  }
}
</code></pre>
</li>
</ul>
<h4 id="208-实现-trie-前缀树"><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/">208. 实现 Trie (前缀树)</a></h4>
<ul>
<li>
<p>题目： Trie（发音类似 &quot;try&quot;）或者说 前缀树 是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p>
<p>请你实现 Trie 类：</p>
<p>Trie() 初始化前缀树对象。<br>
void insert(String word) 向前缀树中插入字符串 word 。<br>
boolean search(String word) 如果字符串 word 在前缀树中，返回 true（即，在检索之前已经插入）；否则，返回 false 。<br>
boolean startsWith(String prefix) 如果之前已经插入的字符串 word 的前缀之一为 prefix ，返回 true ；否则，返回 false 。</p>
<pre><code class="language-c#">示例1：
输入
[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]
[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]
输出
[null, null, true, false, true, null, true]

解释
Trie trie = new Trie();
trie.insert(&quot;apple&quot;);
trie.search(&quot;apple&quot;);   // 返回 True
trie.search(&quot;app&quot;);     // 返回 False
trie.startsWith(&quot;app&quot;); // 返回 True
trie.insert(&quot;app&quot;);
trie.search(&quot;app&quot;);     // 返回 True
</code></pre>
</li>
</ul>
<p>​</p>
<ul>
<li>
<p>解题思路：</p>
<ol>
<li>数组实现：</li>
</ol>
<p>​		前缀树(字典树)是一种多叉树，主要用于存储和查找字符串。假设只存储小写字母，则每一个父节点对应拥有26个子节点(即从a~z)，以及包含是否为一个字符串结束的标志。</p>
<ol start="2">
<li>
<p>哈希表实现：</p>
<p>​		前缀树(字典树)是一种多叉树，主要用于存储和查找字符串。定义一个哈希表结构的字典树，其中key为字符，value为子树。</p>
</li>
</ol>
</li>
<li>
<p>代码：</p>
<pre><code class="language-c#">// 解法1：数组实现
public class Trie {

    bool isEnd;
    Trie[] Children = new Trie[26];
    
    public Trie() {
        
    }
    
    public void Insert(string word) {

        Trie cur = this;

        for(int i = 0; i &lt; word.Length; i++){
            cur.Children[word[i] - 'a'] ??= new Trie();
            cur = cur.Children[word[i] - 'a'];
        }

        cur.isEnd = true;
    }
    
    public bool Search(string word) {

        Trie cur = this;
        for(int i = 0; i &lt; word.Length; i++){
            
            if(cur.Children[word[i] - 'a'] == null){
                return false;
            }

            cur = cur.Children[word[i] - 'a'];
        }

        return cur.isEnd;
    }
    
    public bool StartsWith(string prefix) {

        Trie cur = this;
        for(int i = 0; i &lt; prefix.Length; i++){
            if(cur.Children[prefix[i] - 'a'] == null){
                return false;
            }

            cur = cur.Children[prefix[i] - 'a'];
        }

        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */

// 解法2：哈希表实现
public class Trie {

    Dictionary&lt;char, Trie&gt; Children;
    
    public Trie() {
        this.Children = new Dictionary&lt;char, Trie&gt;();
    }
    
    public void Insert(string word) {

        Trie cur = this;

        for(int i = 0; i &lt; word.Length; i++){
            
            if(!cur.Children.ContainsKey(word[i])){
                cur.Children.Add(word[i], new Trie());
            }

            cur = cur.Children[word[i]];
        }

        if(!cur.Children.ContainsKey('#')){
            cur.Children.Add('#', new Trie());
        }
    }
    
    public bool Search(string word) {

        Trie cur = this;
        for(int i = 0; i &lt; word.Length; i++){
            if(!cur.Children.ContainsKey(word[i])){
                return false;
            }

            cur = cur.Children[word[i]];
        }
        
        if(cur.Children.ContainsKey('#')){
            return true;
        }
        
        return false;
    }
    
    public bool StartsWith(string prefix) {

        Trie cur = this;
        for(int i = 0; i &lt; prefix.Length; i++){
            if(!cur.Children.ContainsKey(prefix[i])){
                return false;
            }

            cur = cur.Children[prefix[i]];
        }

        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[线段树]]></title>
        <id>https://horolee.github.io/SegmentTree/</id>
        <link href="https://horolee.github.io/SegmentTree/">
        </link>
        <updated>2022-07-05T06:38:21.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<h5 id="什么是线段树">什么是线段树？</h5>
<p>线段树是一种二叉树，广义上也被归类为二叉搜索树。它是一个工具，能将区间的修改、维护和查询，时间复杂度优化为log级别。</p>
<p>线段树的维护只需要小区间更新大区间，线段树是平衡二叉树。</p>
<figure data-type="image" tabindex="1"><img src="https://horolee.github.io/post-images/1657006086429.png" alt="" loading="lazy"></figure>
</li>
<li>
<h5 id="线段树的使用局限性">线段树的使用局限性</h5>
<p>问题需要满足：区间加法(对于[L,R]的区间，它的答案可以由[L,M]和[M+1,R]的答案合并求出) 。</p>
<p>满足的问题：区间求和，区间最大最小值等。</p>
<p>不满足的问题：区间的众数、区间最长连续问题、最长不下降问题等。</p>
</li>
<li>
<h5 id="线段树解决问题的步骤">线段树解决问题的步骤</h5>
<ol>
<li>
<p><strong>建树</strong></p>
<ul>
<li>
<p>以堆的方式存储数据</p>
<pre><code class="language-mermaid">graph TB;
1((1))---2((2))
1((1))---3((3))
2((2))---4((4))
2((2))---5((5))
3((3))---6((6))
3((3))---7((7))
</code></pre>
<p>其中，若1号结点值为i，则其左子树结点值为2i，右子树结点值为2i+1，父结点值为i div 2(div为整除)。</p>
</li>
<li>
<p>位运算计算效率更高</p>
</li>
<li>
<p>线段树的数组一般要开到4*n才能防止出现越界访问</p>
</li>
</ul>
</li>
<li>
<p>单点修改</p>
<ul>
<li>当需要修改数列中下标为i的数据时，从根结点向下深度搜索，如果当前结点的左儿子的区间[L,R]包含了i，也就是L&lt;=i&lt;=R，就访问左儿子，否则就访问右儿子。直到L=R，也就是搜到了只包含这个数据的结点，就可以修改它。不要忘了将包含此数据的大区间的值更新。</li>
<li>仅有单点修改的区间查询不需要处理lazy标记，步骤为：
<ul>
<li>如果要查询的区间完全覆盖当前区间，直接返回当前区间的值；</li>
<li>如果查询区间和左儿子有交集，搜索左儿子</li>
<li>如果查询区间和右儿子有交集，就搜索右儿子</li>
<li>最后合并处理两边查询的数据</li>
</ul>
</li>
</ul>
</li>
<li>
<p>区间修改</p>
<ul>
<li>如果按照常规思路，向下递归遍历所有结点一一修改，时间复杂度和暴力处理相差无几。于是这里用到了lazy标记。</li>
<li>&lt;lazy标记&gt;将某个区间标记，表示这个区间的值已经更新，但它的子区间却没有更新，更新的信息就是标记里存的值。</li>
<li>区间修改的步骤：
<ul>
<li>如果要修改的区间完全覆盖当前区间，直接更新这个区间，打上lazy标记</li>
<li>如果没有完全覆盖，且当前区间有lazy标记，先下传lazy标记到子区间，再清除当前区间的lazy标记</li>
<li>如果修改区间和左儿子有交集，搜索左儿子</li>
<li>如果修改区间和右儿子有交集，搜索右儿子</li>
<li>最后将当前区间的值更新</li>
</ul>
</li>
</ul>
</li>
<li>
<p>区间修改后的区间查询</p>
<ul>
<li>如果要查询的区间完全覆盖当前区间，直接返回当前区间的值</li>
<li>如果没有被完全包含，下传lazy标记</li>
<li>如果查询区间和左儿子有交集，搜索左儿子</li>
<li>如果查询区间和右儿子有交集，搜索右儿子</li>
<li>最后合并处理两边查询的数据</li>
</ul>
</li>
</ol>
</li>
<li>
<h5 id="线段数模板例题">线段数模板例题</h5>
<ol>
<li>
<p>已知一个数列，你需要进行下面两种操作：将某区间每一个数加上k，求出某区间所有数的和</p>
<blockquote>
<p>输入格式：</p>
<p>第一行包含两个整数n, m(1&lt;=n, m&lt;=10^5)，分别表示该数列数字的个数和操作的总个数</p>
<p>第二行包含n个用空格分隔的整数，其中第i个数字表示数列第i项的初始值</p>
<p>接下来m行每行包含3或4个整数，表示一个操作：</p>
<p>​	1 x y k：将区间[x, y]内的每个数加上k</p>
<p>​	2 x y ： 输出区间[x, y]内每个数的和</p>
<p>输出格式：</p>
<p>输出包含若干行整数，即为所有操作2 的结果。</p>
<blockquote>
<p>输入：</p>
<p>5 5</p>
<p>1 5 4 2 3</p>
<p>2 2 4</p>
<p>1 2 3 2</p>
<p>2 3 4</p>
<p>1 1 5 1</p>
<p>2 1 4</p>
<p>输出：</p>
<p>11</p>
<p>8</p>
<p>20</p>
</blockquote>
</blockquote>
</li>
</ol>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LeetCode 每日一题(20220701)]]></title>
        <id>https://horolee.github.io/LC20220701/</id>
        <link href="https://horolee.github.io/LC20220701/">
        </link>
        <updated>2022-07-01T08:37:41.000Z</updated>
        <content type="html"><![CDATA[<h4 id="leetcode每日一题">LeetCode每日一题</h4>
<h5 id="241-为运算表达式设计优先级"><a href="https://leetcode.cn/problems/different-ways-to-add-parentheses/">241. 为运算表达式设计优先级</a></h5>
<ul>
<li>
<p>题目： 给你一个由数字和运算符组成的字符串 expression ，按不同优先级组合数字和运算符，计算并返回所有可能组合的结果。你可以 按任意顺序 返回答案。生成的测试用例满足其对应输出值符合 32 位整数范围，不同结果的数量不超过 104 。</p>
<pre><code class="language-c#">示例1：
输入：expression = &quot;2-1-1&quot;
输出：[0,2]
解释：
((2-1)-1) = 0 
(2-(1-1)) = 2

示例2：
输入：expression = &quot;2*3-4*5&quot;
输出：[-34,-14,-10,-10,10]
解释：
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10
</code></pre>
</li>
</ul>
<p>​</p>
<ul>
<li>
<p>解题思路：</p>
<p>对于一个形如x op y的算式而言(op为操作数)，它的结果取决于x和y的结果组合数。接下来该问题的子问题就是x op y 中的x和y的全部组合。属于<strong>分治</strong>问题。</p>
<p>接下来就是分治算法三步走：</p>
<ol>
<li>
<p>分解：按运算符分为左右两部分，分别求解</p>
</li>
<li>
<p>解决：实现一个递归函数，输入算式，返回算式解</p>
</li>
<li>
<p>合并：根据运算符合并左右两部分的解，得出最终解</p>
</li>
</ol>
</li>
<li>
<p>代码：</p>
<pre><code class="language-c#">public class Solution {
    public IList&lt;int&gt; DiffWaysToCompute(string expression) {
        IList&lt;int&gt; res = new List&lt;int&gt;();

        if(IsDigit(expression)){
            res.Add(int.Parse(expression));
            return res;
        }
        
        IList&lt;int&gt; left = new List&lt;int&gt;();
        IList&lt;int&gt; right = new List&lt;int&gt;();

        // 遍历字符串
        for(int i = 0; i &lt; expression.Length; i++){
            if(expression[i] == '+' || expression[i] == '-' || expression[i] == '*'){
                left = DiffWaysToCompute(expression.Substring(0, i));
                right =  DiffWaysToCompute(expression.Substring(i + 1, expression.Length - i - 1));
                foreach(int l in left){
                    foreach(int r in right){
                        if(expression[i] == '+'){
                            res.Add(l + r);
                        }
                        if(expression[i] == '-'){
                            res.Add(l - r);
                        }
                        if(expression[i] == '*'){
                            res.Add(l * r);
                        }
                    }
                }
            }
        }
        
        return res;
    }

    private bool IsDigit(string str){
        if(string.IsNullOrEmpty(str)){
            return false;
        }
        
        ASCIIEncoding ascii = new ASCIIEncoding();
        byte[] bytestr = ascii.GetBytes(str);        
 
        foreach (byte c in bytestr)                   
        {
            if (c &lt; 48 || c &gt; 57)                          
            {
                return false;                             
            }
        }
        return true;
    }
}
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pip 包整理]]></title>
        <id>https://horolee.github.io/pippackage/</id>
        <link href="https://horolee.github.io/pippackage/">
        </link>
        <updated>2022-06-29T03:59:32.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python"># create env
conda create -n pytorch python=3.7

# pytorch
conda install pytorch torchvision torchaudio cudatoolkit=11.3 -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/win-64/
pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu113

# cv2
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple opencv-python

# cython
pip install cython

# pillow
pip install pillow

# matplotlib
pip install matplotlib

# termcolor
pip install termcolor

# cloudpickle
pip install cloudpickle

# tabulate
pip install tabulate

# tensorboard
pip install tensorboard

# tqdm
pip install tqdm

# yacs
pip install yacs

# mock
pip install mock

# fvcore
pip install fvcore

# pydot
pip install pydot

# wheel
pip install wheel

# future
pip install future

# lxml
pip install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple

# labelme
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple labelme

# py to pyc
python -m py_compile train.py

# py to pyd
1. pip install cython
2. create setup.py file:
    from distutils.core import setup
    from Cython.Build import cythonize
    setup(
        name = 'Hello world app',
        ext_modules = cythonize(&quot;vgg.py&quot;),
    )
3. cmd run ：python setup.py build_ext
</code></pre>
]]></content>
    </entry>
</feed>